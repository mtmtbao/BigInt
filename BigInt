
import java.io.LineNumberInputStream;
import java.util.Arrays;

/* 
 * BigInt.java
 * Student First Name: Mengting
 * Student Last Name: Bao
 * A class for objects that represent non-negative integers of 
 * up to 20 digits.
 */

public class BigInt  {
    // the maximum number of digits in a BigInt -- and thus the length
    // of the digits array
    private static final int SIZE = 20;
    
    // the array of digits for this BigInt object
    private int[] digits;
    
    // the number of significant digits in this BigInt object
    private int numSigDigits;

    /*
     * Default, no-argument constructor -- creates a BigInt that 
     * represents the number 0.
     */
    public BigInt() {
        this.digits = new int[SIZE];
        this.numSigDigits = 1;  // 0 has one sig. digit--the rightmost 0!
    }

    public BigInt(int[] arr){
        if (arr.length <= 0 || arr.length > SIZE){
            throw new IllegalArgumentException("No valid length.");
        }
        //this.digits = new int[arr.length];
        this.digits = new int[SIZE];
        //System.out.println(Arrays.toString(this.digits));
        //System.out.println(Arrays.toString(arr));

        int index = this.digits.length - 1;
        for (int i = arr.length - 1; i >= 0; i--){
            // for (int j = arr.length - 1; j >= 0; j--){
            //     this.digits[i] = arr[j];
            //     System.out.println(this.digits[i]);
            this.digits[index--] = arr[i];
            }
        
        //System.out.println(Arrays.toString(this.digits));
        
        int count = 0;
        for (int i = 0; i < arr.length; i++){
            //if (arr[i] == 0){
                if (arr[i] == 0){
                    count++;
                }
                else{
                    break;
                }
        }
        if (count == arr.length){
            numSigDigits = 1;
        }
        else{
            numSigDigits = arr.length - count;
        }

        }
        // int count = 0; //count how many zeros
        // for (int i = 0; i < arr.length; i++){
        //     // for (int j = arr.length - 1; j > 0; j--){
        //     //     arr[j] = this.digits[i];
        //     //     System.out.println(this.digits);
        //     if (arr[i] == 0){
        //         count++;
        //     }
        //         // if (arr[j] == 0){
        //         //     //this.numSigDigits++;
        //         //     count++;

        //     else{
        //         break;
        //         }
        // }

        // if (count == arr.length){
        //     numSigDigits = 1;
        // }
        // else{
        //     numSigDigits = arr.length - count;
        // }
    
    

    public int getNumSigDigits(){
        return numSigDigits;
    }

    public String toString() {
        StringBuilder str = new StringBuilder();
        int count = 0;
        //str.append("[");
        for (count = 0; count < SIZE; count++){
            if (this.digits[count] != 0){
                break;
            }
        }
        //System.out.println(count);
        //str.append("]");
        for (int i = count; i < this.digits.length; i++){
            str.append(this.digits[i]);
        }
        return str.toString();
    }
    
    public BigInt(int n){
        if (n < 0){
            throw new IllegalArgumentException("Negative value");
        }
        this.digits = new int[SIZE];
        for (int i = 0; i < Integer.toString(n).length(); i++){
            this.digits[i] = Integer.toString(n).charAt(i);
        }

        int countDigit = 0;
        String stringNum = String.valueOf(n);
        //System.out.println(stringNum);
        for (countDigit = 0; countDigit < stringNum.length(); countDigit++){
            if (stringNum.charAt(countDigit) != '0'){
                break;
            }
        }
        for (int i = countDigit; i < stringNum.length(); i++){
            countDigit++;
        }
       // System.out.println(countDigit);
    }

    public int compareTo(BigInt other){
        if (other == null){
            throw new IllegalArgumentException("Null");
        }
        for (int i = 0; i < SIZE; i++){
            int thisUnitDigit = this.digits[i];
            int otherUnitDigit = other.digits[i];
            if (thisUnitDigit > otherUnitDigit){
                return 1;
            }
            if (thisUnitDigit > otherUnitDigit){
                return -1;
            }
        }
        return 0;
    }

    public BigInt add(BigInt other){
        if (other == null){
            throw new IllegalArgumentException("Null");
        }
        //int carry = 0;
        //int largerLen = Math.max(this.digits.length, other.digits.length);
        //System.out.println(len);
        //BigInt sum = new BigInt();
        int sum = 0;
        for (int i = 0; i < SIZE + 1; i++){
            if (i >= SIZE){
                throw new ArithmeticException("Overflow");
            }
            int thisUnitDigit = this.digits[i];
            int otherUnitDigit = other.digits[i];
            int digitSum = thisUnitDigit + otherUnitDigit;
            if (digitSum > 9){
                sum += (digitSum - 10) * (i + 1);
                sum += 10 * (i + 1);
            }
            sum += digitSum * (i + 1);
        }
        BigInt result = new BigInt(sum);
        return result;
    }

    public BigInt mul(BigInt other){
        if (other == null){
            throw new IllegalArgumentException("Null");
        }
        int mul = 0;
        for (int i = (this.getNumSigDigits() - 1); i >= 0; i++){
            int thisUnitDigit = this.digits[i] * (i + 1);
            for (int j = other.getNumSigDigits() - 1; j >= 0; j++){
                // if (i >= SIZE || j >= SIZE){
                //     throw new ArithmeticException("Overflow");
                // }
                int otherUnitDigit = other.digits[j] * (j + 1);
                mul += (thisUnitDigit * otherUnitDigit);
                //System.out.println(mul);
            }
        }
        //System.out.println(mul);
        if (String.valueOf(mul).length() == SIZE){
            throw new ArithmeticException("Overflow");
        }
        //System.out.println(mul);
        BigInt result = new BigInt(mul);
        return result;
    }

    public int[] getDigits(){
        return this.digits;
    }

    public static void main(String [] args) {
        System.out.println("Unit tests for the BigInt class.");
        System.out.println();
        BigInt b1 = new BigInt();
        BigInt b2 = new BigInt();
        b1 = new BigInt(135);
        b2 = new BigInt(42);
        BigInt product = b1.mul(b2);
        System.out.println(product);
        System.out.println();
        // BigInt val = new BigInt(1234567);
        // System.out.println(val);
        // System.out.println(val.getNumSigDigits());
        // int[] arr1 = {1, 1, 1, 1, 1};
        // BigInt val1 = new BigInt(arr1);
        // int[] arr2 = {2, 3};
        // BigInt val2 = new BigInt(arr2);
        // System.out.println(val1.mul(val2));
        //System.out.println(val.getNumSigDigits());
        //b1 = new BigInt(12375);
        //b2 = new BigInt(12375);
        //System.out.println(b1.add(b2));

        
        /* 
         * You should uncomment and run each test--one at a time--
         * after you build the corresponding methods of the class.
         */
        /*
        System.out.println("Test 1: result should be 7");
        int[] a1 = { 1,2,3,4,5,6,7 };
        BigInt b1 = new BigInt(a1);
        System.out.println(b1.getNumSigDigits());
        System.out.println();
        
        System.out.println("Test 2: result should be 1234567");
        b1 = new BigInt(a1);
        System.out.println(b1);
        System.out.println();
        
        System.out.println("Test 3: result should be 0");
        int[] a2 = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
        BigInt b2 = new BigInt(a2);
        System.out.println(b2);
        System.out.println();
        
        System.out.println("Test 4: should throw an IllegalArgumentException");
        try {
            int[] a3 = { 0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
            BigInt b3 = new BigInt(a3);
            System.out.println("Test failed.");
        } catch (IllegalArgumentException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 5: result should be 1234567");
        b1 = new BigInt(1234567);
        System.out.println(b1);
        System.out.println();

        System.out.println("Test 6: result should be 0");
        b2 = new BigInt(0);
        System.out.println(b2);
        System.out.println();

        System.out.println("Test 7: should throw an IllegalArgumentException");
        try {
            BigInt b3 = new BigInt(-4);
            System.out.println("Test failed.");
        } catch (IllegalArgumentException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 8: result should be 0");
        b1 = new BigInt(12375);
        b2 = new BigInt(12375);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 9: result should be -1");
        b2 = new BigInt(12378);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 10: result should be 1");
        System.out.println(b2.compareTo(b1));
        System.out.println();

        System.out.println("Test 11: result should be 0");
        b1 = new BigInt(0);
        b2 = new BigInt(0);
        System.out.println(b1.compareTo(b2));
        System.out.println();

        System.out.println("Test 12: result should be\n123456789123456789");
        int[] a4 = { 3,6,1,8,2,7,3,6,0,3,6,1,8,2,7,3,6 };
        int[] a5 = { 8,7,2,7,4,0,5,3,0,8,7,2,7,4,0,5,3 };
        BigInt b4 = new BigInt(a4);
        BigInt b5 = new BigInt(a5);
        BigInt sum = b4.add(b5);
        System.out.println(sum);
        System.out.println();

        System.out.println("Test 13: result should be\n123456789123456789");
        System.out.println(b5.add(b4));
        System.out.println();

        System.out.println("Test 14: result should be\n3141592653598");
        b1 = new BigInt(0);
        int[] a6 = { 3,1,4,1,5,9,2,6,5,3,5,9,8 };
        b2 = new BigInt(a6);
        System.out.println(b1.add(b2));
        System.out.println();

        System.out.println("Test 15: result should be\n10000000000000000000");
        int[] a19 = { 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 };    // 19 nines!
        b1 = new BigInt(a19);
        b2 = new BigInt(1);
        System.out.println(b1.add(b2));
        System.out.println();

        System.out.println("Test 16: should throw an ArithmeticException");
        int[] a20 = { 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 };  // 20 nines!
        try {
            b1 = new BigInt(a20);
            System.out.println(b1.add(b2));
        } catch (ArithmeticException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();

        System.out.println("Test 17: result should be 5670");
        b1 = new BigInt(135);
        b2 = new BigInt(42);
        BigInt product = b1.mul(b2);
        System.out.println(product);
        System.out.println();

        System.out.println("Test 18: result should be\n99999999999999999999");
        b1 = new BigInt(a20);   // 20 nines -- see above
        b2 = new BigInt(1);
        System.out.println(b1.mul(b2));
        System.out.println();

        System.out.println("Test 19: should throw an ArithmeticException");
        try {
            b1 = new BigInt(a20);
            b2 = new BigInt(2);
            System.out.println(b1.mul(b2));
        } catch (ArithmeticException e) {
            System.out.println("Test passed.");
        } catch (Exception e) {
            System.out.println("Test failed: threw wrong type of exception.");
        }
        System.out.println();
        */
    }
}
